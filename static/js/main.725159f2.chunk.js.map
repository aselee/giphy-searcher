{"version":3,"sources":["actions/index.js","reducers/gifs.js","reducers/modal.js","reducers/auth.js","reducers/index.js","store/configureStore.js","containers/Header.js","components/GifItem.js","components/GifList.js","components/GifModal.js","components/SearchBar.js","containers/Home.js","containers/Signup.js","containers/Login.js","containers/Favorites.js","containers/App.js","index.js"],"names":["OPEN_MODAL","CLOSE_MODAL","REQUEST_GIFS","FETCH_FAVORITED_GIFS","SIGN_OUT_USER","AUTH_ERROR","AUTH_USER","API_URL","API_KEY","requestGifs","term","arguments","length","undefined","dispatch","request","get","concat","replace","then","response","type","payload","favoriteGif","_ref","selectedGif","userUid","Firebase","auth","currentUser","uid","gifId","id","database","ref","update","Object","defineProperty","unfavoriteGif","_ref2","child","remove","fetchFavoritedGifs","on","snapshot","val","openModal","gif","closeModal","signUpUser","credentials","createUserWithEmailAndPassword","email","password","authUser","catch","error","console","log","authError","signInUser","signInWithEmailAndPassword","signOutUser","signOut","verifyAuth","onAuthStateChanged","user","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","initialState","data","favorites","modalIsOpen","authenticated","rootReducer","combineReducers","state","action","objectSpread","message","form","FormReducer","gifs","body","arr","i","hasOwnProperty","push","modal","router","routerReducer","history","createHistory","Header","this","props","_this","react_default","a","createElement","className","key","Link","to","href","onClick","handleSignout","renderAuthLinks","React","Component","connect","Actions","GifItem","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","renderFavoriteHeart","isAuthenticated","favorited","isFavorite","setState","onFavoriteSelect","_this2","alt","src","images","downsized","url","onGifSelect","GifList","gifItems","map","image","components_GifItem","onFavoriteDeslect","onFavoriteDeselect","GifModal","lib_default","isOpen","onRequestClose","original","source","rating","SearchBar","onTermChange","placeholder","onChange","event","onInputChange","target","value","Home","components_SearchBar","actions","components_GifList","components_GifModal","bindActionCreators","Signup","handleFormSubmit","values","renderField","input","label","_ref$meta","meta","touched","assign","authenticationError","renderAuthenticationError","onSubmit","handleSubmit","Field","name","component","reduxForm","validate","errors","test","passwordConfirmation","Login","Favorites","PrivateRoute","objectWithoutProperties","Route","render","Redirect","pathname","from","location","App","Router","containers_Header","exact","path","App_PrivateRoute","authenitcated","store","createStore","compose","applyMiddleware","reduxThunk","routerMiddleware","window","devToolsExtension","f","configureStore","ReactDOM","react_redux_es","containers_App","document","getElementById"],"mappings":"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","file":"static/js/main.725159f2.chunk.js","sourcesContent":["import request from 'superagent';\n\nimport Firebase from 'firebase';\n\nexport const OPEN_MODAL = 'OPEN_MODAL';\nexport const CLOSE_MODAL = 'CLOSE_MODAL';\n\n// Action Type:\n// In Redux, almost always expressed as a const in all caps,\n// so that it can be exported for use in other parts of the app(such as the reducers)\nexport const REQUEST_GIFS = 'REQUEST_GIFS';\n\nexport const FETCH_FAVORITED_GIFS = 'FETCH_FAVORITED_GIFS';\n\n// Action types as constants, passing to our action creators\n// signInUser() and signOutUser() via required type property\n// export const SIGN_IN_USER = 'SIGN_IN_USER';\nexport const SIGN_OUT_USER = 'SIGN_OUT_USER';\n\n// For Firebase\nexport const AUTH_ERROR = 'AUTH_ERROR';\nexport const AUTH_USER = 'AUTH_USER';\n\nconst API_URL = 'https://api.giphy.com/v1/gifs/search?q=';\nconst API_KEY = '&api_key=dc6zaTOxFJmzC'; \n\n// from Firebase console, importing Firebase package,\nconst config = {\n  apiKey: \"AIzaSyBtR3H7Ug-luHa1qzxS66lLddDo9JWcouU\",\n  authDomain: \"react-giphy-a6b0b.firebaseapp.com\",\n  databaseURL: \"https://react-giphy-a6b0b.firebaseio.com\",\n  projectId: \"react-giphy-a6b0b\",\n  storageBucket: \"react-giphy-a6b0b.appspot.com\",\n  messagingSenderId: \"1045369758402\"\n};\n\nFirebase.initializeApp(config);\n\n\n\n// Action Creator:\n// Action creators are functions that create actions.\n\n// ReduxThunk, is forcing the action creator to hold off,\n// on actually dispatching the action object to the reducers\n// until the dispatch is called. \n// Although the superagent is still returning a promise,\n// the .then(response => {}) resolves that promise,\n// giving the actual result of the call.\n// It is within that method that we dispatch our action with the resolved data. \nexport function requestGifs(term = null) {\n  return function(dispatch) {\n    request.get(`${API_URL}${term.replace(/\\s/g, '+')}${API_KEY}`).then(response => {\n      dispatch({\n        type: REQUEST_GIFS,\n        payload: response\n      });\n    });\n  }\n}\n\nexport function favoriteGif({selectedGif}) {\n  const userUid = Firebase.auth().currentUser.uid;\n  const gifId = selectedGif.id;\n\n  return dispatch => Firebase.database().ref(userUid).update({\n    [gifId]: selectedGif\n  });\n}\n\nexport function unfavoriteGif({selectedGif}) {\n  const userUid = Firebase.auth().currentUser.uid;\n  const gifId = selectedGif.id;\n\n  return dispatch => Firebase.database().ref(userUid).child(gifId).remove();\n}\n\nexport function fetchFavoritedGifs() {\n  return function(dispatch) {\n    const userUid = Firebase.auth().currentUser.uid;\n\n    // Using Firebase's on method to pass our favorited gifs\n    // into the Redux store.\n    // on is a listener that fires when the initial data is stored\n    // at the specified location, which in this case, our child path\n    // with our user ID) and again every time the data changes.\n    // it passes a snapshot of this data through the callback,\n    // and then dispatching the value of this snapshot to our reducer.\n\n    Firebase.database().ref(userUid).on('value', snapshot => {\n      dispatch({\n        type: FETCH_FAVORITED_GIFS,\n        payload: snapshot.val()\n      })\n    });\n  }\n}\n\n  // const data = request.get(`${API_URL}${term.replace(/\\s/g, '+')}${API_KEY}`);\n\n  // console.log(term);\n\n  // Action:\n  // Plain JavaScript object with two pieces:\n  // a type (required) and a payload (only required if,\n  // you want to pass data along with your action)\n\n  // BEFORE:\n  // return {\n  //   type: REQUEST_GIFS,\n  //   payload: data\n    // term\n//   }\n// }\n\n\n// Adding OPEN_MODAL and CLOSE_MODAL with two action creators, openModal() and closeModal().\n// openModal() action creator takes a gif as an argument:\n// this will be the gif our modal will render.\nexport function openModal(gif) {\n  return {\n    type: OPEN_MODAL,\n    gif\n  }\n}\n\nexport function closeModal() {\n  return {\n    type: CLOSE_MODAL\n  }\n}\n\n//Action types\n\n// Firebase functions; using redux-thunk\n// Both functions are similar but the only difference is between\n// createUserWithEmailAndPassword and signInWithEmailAndPassword.\n\n// createUserWithEmailAndPassword, to create a user\nexport function signUpUser(credentials) {\n  return function(dispatch) {\n    Firebase.auth().createUserWithEmailAndPassword(credentials.email, credentials.password)\n      .then(response => {\n        dispatch(authUser());\n      })\n      .catch(error => {\n        console.log(error);\n        dispatch(authError(error));\n      });\n  }\n}\n\n// signInWithEmailAndPassword, is to log in an existing user.\nexport function signInUser(credentials) {\n  return function(dispatch) {\n    Firebase.auth().signInWithEmailAndPassword(credentials.email, credentials.password)\n      .then(response => {\n        dispatch(authUser());\n      })\n      .catch(error => {\n        dispatch(authError(error));\n      });\n  }\n}\n//////////\n\n\n\n// Action types as constants, passing to our action creators\n// signInUser() and signOutUser() via required type property\n\n// export function signInUser() {\n//   return {\n//     type: SIGN_IN_USER\n//   }\n// }\n\n// exporting signOutUser function\nexport function signOutUser() {\n  return function (dispatch) {\n    Firebase.auth().signOut()\n      .then(() => {\n        dispatch({\n          type: SIGN_OUT_USER\n        })\n      });\n  }\n}\n\n// Before:\n// export function signOutUser() {\n//   return {\n//     type: SIGN_OUT_USER\n//   }\n// }\n\n// using reduxThunk to conditionally dispatch some actions.\n// If the user is signed in, Firebase.auth.onAuthStateChanged()\n// will return a valid user object, and we can dispatch our authUser()\n// action creator to update authenticated to true on the state. \n// if Firebase.auth.onAuthStateChanged() returns null, it means \n// that the Firebase auth info is no longer valid, so it will call signOutUser()\n// to lock the user out of the application until the user signs in again.\n// But if the page is refreshed, it still looks like the user is logged out.\n// Thus, we need to call verifyAuth() almost as soon as the app boots so\n// it can update the state accordingly. \nexport function verifyAuth() {\n  return function (dispatch) {\n    Firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        dispatch(authUser());\n      } else {\n        dispatch(signOutUser());\n      }\n    });\n  }\n}\n\n// instead of having SIGN_IN_USER,\n// using AUTH_USER, setting authenticated to true for both\n// signing up and logging in.\nexport function authUser() {\n  return {\n    type: AUTH_USER\n  }\n}\n\n// if user is not able to sign up or log in and returns an error,\n// authError will catch and in the callback, passing the error\n// message to the new authError action creator.\nexport function authError(error) {\n  return{\n  type: AUTH_ERROR,\n  payload: error\n  }\n}","import { REQUEST_GIFS, FETCH_FAVORITED_GIFS } from '../actions';\n\nconst initialState = {\n  // setting initiate state for reducer by setting a \n  // data property to an empty array.\n  // this helps avoid any issues with gifs coming back as\n  // null or undefined. \n  data: [],\n  favorites: []\n};\n\n// action argument handles any action dispatched in our application.\n// switch statements, check for any actions that the reducer\n// cares about or if it does not care, it will retrun the state as default.\n\nexport default function gifs(state = initialState, action) {\n  switch(action.type) {\n    case REQUEST_GIFS:\n      return {\n        // object spread syntax\n        ...state, data: action.payload.body.data\n      };\n    // Since the gifs are from Giphy, are being returned as an array,\n    // but theyre being returned as a single jSON object from Firebase.\n    // We can however iterate through our Firebase response object\n    // and add it to an empty array, and then return that array from our reducer.\n    case FETCH_FAVORITED_GIFS:\n      var arr = [];\n      for(var i in action.payload) {\n        if (action.payload.hasOwnProperty(i)) {\n          arr.push(action.payload[i]);\n        }\n      }\n      return {\n        ...state, favorites: arr\n      };\n\n    default:\n      return state;\n  }\n}\n// // dummy data hard-coded list of gifs\n\n// export default function() {\n//   return [\n//     {\n//       id: 1,\n//       url: 'http://fakeimg.pl/300/'\n//     },\n//     {\n//       id: 2,\n//       url: 'http://fakeimg.pl/300/'\n//     },\n//     {\n//       id: 3,\n//       url: 'http://fakeimg.pl/300/'\n//     }\n//   ];\n// }","import {OPEN_MODAL, CLOSE_MODAL} from '../actions';\n\n// creating a initialState const and setting selectedGif\n// to null and modalIsOpen to false, snice these will be\n// the default values once the app is started.\n// state in this context refers only to the state in the ModalReducer.\nconst initialState = {\n  selectedGif: null,\n  modalIsOpen: false\n};\n\nexport default function modal(state = initialState, action) {\n  \n  // using the switch statement, similar to GifsReducer.\n  // using object spread syntax to copy the state and avoid mutating the state.\n  // setting up the modalIsOpen and selectedGif properties\n  switch(action.type) {\n    case OPEN_MODAL:\n      return {\n        ...state,\n        modalIsOpen: true,\n        selectedGif: action.gif.selectedGif\n      };\n    case CLOSE_MODAL:\n      return {\n        ...state,\n        modalIsOpen: false,\n        selectedGif: null\n      };\n      default: \n        return state;\n  }\n}","import { AUTH_USER, AUTH_ERROR, SIGN_OUT_USER } from '../actions';\n\n\n// setting the initialState for the user to be signed out,\n// but if the SIGN_IN_USER is fired, a new copy of the state\n// is created with authenticated set to true(the reducer should\n// act as a \"Save-As\" functionality instead of mutating the state)\n// if SIGN_OUT_USER is fired, a new copy is created and authenticated\n// is set to false. \n\nconst initialState = {\n  authenticated: false,\n  error: null\n};\n\n// Adding error as a key in the state.\n// AUTH_ERROR action, setting the message that comes back \n// from Firebase as the error; in AUTH_USER and SIGN_OUT_User,\n// but setting the error as null. \n// This is to see even if the user signs in/out successfully,\n// an error message will show about incorrect password or duplicate email.\n\nexport default function gifs(state = initialState, action) {\n  switch (action.type) {\n    case AUTH_USER:\n      return {\n        ...state,\n        authenticated: true,\n        error: null\n      };\n    case AUTH_ERROR:\n      return {\n        ...state,\n        error: action.payload.message\n      };\n    case SIGN_OUT_USER:\n    return {\n      ...state,\n      authenticated: false,\n      error: null\n    };\n    default:\n      return state;\n  }\n}\n\n// BEFORE:\n// export default function gifs (state = initialState, action) {\n//   switch (action.type) {\n//     case SIGN_IN_USER:\n//     return {\n//       ...state, authenticated: true\n//     };\n//     case SIGN_OUT_USER:\n//     return {\n//       ...state, authenticated: false\n//     };\n//     default: \n//     return state;\n//   }\n// }","import { combineReducers } from 'redux';\nimport GifsReducer from './gifs';\nimport ModalReducer from './modal';\nimport { routerReducer } from 'react-router-redux';\nimport { reducer as FormReducer} from 'redux-form';\nimport AuthReducer from './auth';\n\n\n// combining all of our reducers into the rootReducer\n// passing the main reducing function as a parameter\n// when creating the store.\n\n// using redux's built-in combineReducers function\n// to create a single object that contains a bunch of reducers.\n// the key on the object is 'gifs', is the name of the\n// piece of the state, and the vaule is the reducer itself\n// or more accurately what is being returned by the reducer\n\nconst rootReducer = combineReducers({\n  auth: AuthReducer,\n  form: FormReducer,\n  gifs: GifsReducer,\n  modal: ModalReducer,\n  router: routerReducer\n});\n\nexport default rootReducer;\n","// Redux store\n\nimport { createStore, compose, applyMiddleware } from 'redux';\n// import ReduxPromise from 'redux-promise';\nimport rootReducer from '../reducers';\n// importing history package dependency from react-router\nimport createHistory from 'history/createBrowserHistory';\nimport {routerMiddleware} from 'react-router-redux';\nimport * as Actions from '../actions';\n\n// using redux-thunk\nimport reduxThunk from 'redux-thunk';\n\nexport const history = createHistory();\n\n// exporting history object and removing default from configureStore() method,\n// since configureStore method is no longer being exported by default.\n// export default function configureStore (initialState) {\n\nexport function configureStore(initialState) {\n\n  // using redux's createStore function to create the store.\n  // passing the store to the rootReducer,\n  // so that the can update the state tree of the app.\n\n  const store = createStore(\n    rootReducer,\n    initialState,\n    compose(\n      // using reduxThunk instead of redux promise\n      applyMiddleware(reduxThunk, routerMiddleware(history)),\n      // added routerMiddleware\n      // applyMiddleware(ReduxPromise, routerMiddleware(history)),\n      window.devToolsExtension ? window.devToolsExtension() : f => f\n    )\n    // adding redux dev tools chrome extension to access the store.\n  );\n  \n  if (module.hot) {\n    // Enable Webpack hot module replacement for reducers\n    module.hot.accept('../reducers', () => {\n      const nextRootReducer = require('../reducers').default;\n      store.replaceReducer(nextRootReducer);\n    });\n  }\n\n  // importing ACtions and dispatching the object\n  store.dispatch(Actions.verifyAuth());\n\n  return store;\n}","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport * as Actions from '../actions';\n\n\n// Bootstrap navbar \n// Using Link to navigate through the app instantly\n// Replacing <a> tags with <Link>, let react-router-dom know it should \n// swap out the component passed into the App instead of refreshing the page.\n\nclass Header extends React.Component {\n\n  // Don't need to call mapsDispatchToProps and bindActionCreators to hook the action creators into an container.\n  // The header doesn't have any child components, so we can just pass in Actions\n  // directly in order to make signOutUser() available on this.props.\n  handleSignout() {\n    this.props.signOutUser();\n  }\n\n\n  // Extracting away the conditional logic needed to redner the links into its own method.\n  // authenticated is being made available from the AuthReducer via mapStateToProps,\n  // and if it's set to true, it will return the links to \"My Favs\" and \"Sign Out\", \n  // since that's what signed-in users should see.\n\n  // Returning with an array of <li>, since any sort of React render() method,\n  // we have to return a single element, which is why we're always wrapping things in <div> tags.\n  // However wrapping a group of <li>s within a <div> inside of a <ul> isn't very clean.\n  // Can instead return an array of comma-separated <li> and react will list them in order.\n  // The only thing that is needed in order to do this, is to give the lists a key prop, so they are unique.\n  renderAuthLinks() {\n    if(this.props.authenticated) {\n      return [\n        <li className=\"nav-item\" key={1}>\n          <Link className=\"nav-link\" to=\"/favorites\">My Favs</Link>\n        </li>,\n        <li className=\"nav-item\" key={2}>\n          {/* The reason that the \"Sign Out\" link is not a <Link>, is because we're not actually\n          routing anywhere when the link is clicked; instead, we're calling the handleSignout() method\n          to fire the signOutUser() action creator. */}\n          <a className=\"nav-link\" href=\"/\" onClick={() => this.handleSignout()}>Sign Out</a>\n        </li>\n      ]\n    } else {\n      return [\n        <li className=\"nav-item\" key={1}>\n          <Link className=\"nav-link\" to=\"/login\">Login</Link>\n        </li>,\n        <li className=\"nav-item\" key={2}>\n          <Link className=\"nav-link\" to=\"/signup\">Sign Up</Link>\n        </li>\n      ]\n    }\n  }\n\n  \n  render() {\n    return (\n      <nav className=\"navbar navbar-default\">\n        <div className=\"container-fluid\">\n          <div className=\"navbar-header\">\n            {/* <a href=\"/\" className=\"navbar-brand\">ReactGiphyy</a> */}\n            <Link className=\"navbar-brand\" to=\"/\">ReactGiphySearch</Link>\n          </div>\n          <ul className=\"nav navbar-nav navbar-right\">\n\n            {this.renderAuthLinks()}\n            {/* <li className=\"nav-item\"> */}\n              {/* <a className=\"nav-link\" href=\"/login\">Login Here</a> */}\n              {/* <Link ClassName=\"nav-link\" to=\"/login\">Login Here</Link> */}\n            {/* </li> */}\n            {/* <li className=\"nav-item\"> */}\n              {/* <a className=\"nav-link\" href=\"/signup\">Sign in</a> */}\n              {/* <Link className=\"nav-link\" to=\"/signup\">Sign in</Link> */}\n            {/* </li> */}\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    authenticated: state.auth.authenticated\n  }\n}\n\nexport default connect(mapStateToProps, Actions)(Header);","import React from 'react';\n\nclass GifItem extends React.Component {\n  \n  // Although we are using action and reducers when anything affects the app store,,\n  // However, we're only managing a small piece of UI here and trying to keep track in the Redux store,\n  // whether all of the individual GifItems are favorited would require commplex codes.\n  // nothing wrong using React's State for minor UI changes on individual components,\n  // but if its going to affect other parts of the app or involves an external API call,\n  // probably should use dispatch an action instead. \n  constructor(props) {\n    // passing through props as an argument.\n    // allows us to have access to this.props within the constructor.\n    // but not needed unless trying to pass props through to local state.\n    super(props);\n    this.state = {favorited: this.props.isFavorite};\n  }\n\n\n  // Setting the favorited key on state, so know whether \n  // to render a filled-in or empty heart to show whether a gif has been favorited or not.\n  favoriteGif() {\n    this.setState({favorited: true });\n    this.props.onFavoriteSelect(this.props.gif);\n  }\n\n  unfavoriteGif() {\n    this.setState({favorited: false });\n    this.props.onFavoriteSelect(this.props.gif);\n  }\n\n// Also using the props onFavoriteSelect and onFavoriteDeslect to fire actions\n  renderFavoriteHeart = () => {\n    if (! this.props.isAuthenticated ){\n      return '';\n    }\n\n    if(this.state.favorited) {\n      return <i className=\"favorite fa fa-heart\" \n        onClick={() => this.unfavoriteGif()}/>;\n    }\n      return <i className=\"favorite fa fa-heart-o\"\n        onClick={() => this.favoriteGif()}/>;\n  };\n\n  render () {\n    return (\n      <div className=\"gif-item\">\n        {this.renderFavoriteHeart()}\n        <img alt=\"fav\" src={this.props.gif.images.downsized.url} \n          onClick={() => this.props.onGifSelect(this.props.gif)}/>\n      </div>\n    );\n  }\n}\n\nexport default GifItem;\n\n// Before; vanilla react code, boilerplate\n\n// const GifItem = ({gif, onGifSelect}) => {\n//   return (\n    // need to pass onGifSelect as a prop\n    // from GifList to GifItem\n//     <div className=\"gif-item\" onClick={() => onGifSelect(gif)}>\n//       <img src={gif.images.downsized.url} alt=\"gif\"/>\n//     </div>\n//   )\n// };\n\n// export default GifItem;","import React from 'react';\nimport GifItem from './GifItem';\n\n// GifList, to accept a list of gifs from the App component,\n// lookp through them, and render an individual GifItem\n// for each object in the array.\n\n// Using Stateless functional component.\n// Used whenever our component does not need to actively\n// track or modify our application's state.\n// The Parent component (App) passes in all of the data\n// in GifList needs via its props. \n// The GifList only needs to worry about displaying the data.\nconst GifList = (props) => {\n  const gifItems = props.gifs.map((image) => {\n    return <GifItem key={image.id} \n                    gif={image} \n                    onGifSelect={props.onGifSelect}\n                    onFavoriteSelect={props.onFavoriteSelect}\n                    onFavoriteDeslect={props.onFavoriteDeselect}\n                    isAuthenticated={props.isAuthenticated}\n                    isFavorite={props.isFavorite}\n            />\n  });\n\n  return (\n    <div className=\"gif-list\">\n      {gifItems}\n    </div>\n  );\n};\n\nexport default GifList;","import React from 'react';\nimport Modal from 'react-modal';\n\nconst GifModal = (props) => {\n  \n  // if selectedGif does not exist on the current \n  // null selectedGif, return an empty div\n  if (!props.selectedGif) {\n    return <div></div>;\n  }\n\n  return (\n    <Modal\n      isOpen={ props.modalIsOpen }\n      onRequestClose={ () => props.onRequestClose() }>\n      <div className=\"gif-modal\">\n        <img src={ props.selectedGif.images.original.url } alt=\"\"/>\n        <p><strong>Source:</strong> <a href={ props.selectedGif.source }>{ props.selectedGif.source }</a></p>\n        <p><strong>Rating:</strong> { props.selectedGif.rating}</p>\n        <button onClick={() => props.onRequestClose()}>Close</button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default GifModal","import React from 'react';\n\n// simplifying SearchBar \n// original code in SearchBar Draft file\n\nclass SearchBar extends React.Component {\n  // no need for constructor,\n  // due to no longer needing to initialize the state.\n\n  // App container is wired into Redux,\n  // and will not be needed this.setState() in onInputChange()\n  \n  // The App component is going to pass the REQUEST_GIFS action\n  // to the SearchBar; using the onINputChange function.\n  onInputChange(term) {\n    this.props.onTermChange(term);\n  }\n  \n  render () {\n    return (\n      <div className=\"search\">\n        <input placeholder=\"Search for gifs!\"\n          // every time the input is updated,\n          // React's onChange property automatically fires.\n          onChange={event => this.onInputChange(event.target.value)} />\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;\n","import React from 'react';\n// importing the connect property from react-redux,\n// connect is needed when to link React and Redux (two separate libraries)\n// the react-redux package will pull from the Redux's state and React as props.\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n// importing all (expressed with *) exported modules\n// in actions/index.js file as a single object, Actions.\n// This will give the access to all of the action creators,\n// so that it can be hooked to our components.\nimport * as Actions from '../actions';\nimport GifList from '../components/GifList';\nimport GifModal from '../components/GifModal';\nimport SearchBar from '../components/SearchBar';\nimport '../styles/App.css';\n\n\nclass Home extends React.Component {\n  // passing requstGifs action creator to SearchBar\n  // via the onTermChange prop.\n  // whenever the onInputChange method is fired by entering\n  // text in the input, action creator will be fired as well.\n  render() {\n    return (\n      <div>\n        <SearchBar onTermChange={this.props.actions.requestGifs}/>\n        {/* adding onGifSelect prop to GifList and passing in the selectedGif\n        argument being sent all the way up to GifItem component.  */}\n        <GifList gifs={this.props.gifs} \n          onGifSelect={ selectedGif => this.props.actions.openModal({selectedGif}) } \n          onFavoriteSelect={ selectedGif => this.props.actions.favoriteGif({selectedGif}) }\n          onFavoriteDeslect={ selectedGif => this.props.actions.unfavoriteGif({selectedGif}) }\n          isAuthenticated={ this.props.authenticated }\n        />\n        {/* Adding GifModal with modalIsOpen and selectedGif when being passed through as props */}\n        <GifModal modalIsOpen={ this.props.modalIsOpen }\n          selectedGif={ this.props.selectedGif }\n          onRequestClose={ () => this.props.actions.closeModal() }\n        />\n      </div>\n    );\n  }\n}\n\n// mapStateToProps functions allows the App component\n// to subscribe to the Redux store update; \n// whenever there are changes in the store.\n\n// linking mapStateToProps function with reducers.\n// linking the gifs from GifsReducer to this.props.gifs\n// in the App component.\nfunction mapStateToProps(state) {\n  return {\n    authenticated: state.auth.authenticated,\n    gifs: state.gifs.data,\n    // modalIsOpen and selectedGif being added to App's props\n    // from Redux store via mapDispatchToProps.\n    modalIsOpen: state.modal.modalIsOpen,\n    selectedGif: state.modal.selectedGif\n  };\n}\n\n// mapDispatchToProps is the second, optional argument that\n// passes to react-redu'x connect()() method.\n\n// Setting this.props.actions on the App by calling\n// Redux's bindActionCreators method.\n// bindActionCreators takes a single object whose values\n// are action creators (in this case, our Actions object\n// that was imported from src/actions/index.js) and\n// wraps every action creator in a dispatch call, \n// so that they can be invoked within our container.\n// that is how the app is notified that there is a state change.\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(Actions, dispatch)\n  };\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n\n// mapDispatchToProps passes data from the container to the store.\n// It provides the ability for the container to tell the store\n// that it needs to change and enables this by adding action\n// creators to the container as props\n\n// mapStateToProps passes data to our container from the store.\n// It makes the result of reducer available to the container as props.\n","import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\n// connecting actions\n// need to connect signInUser() action creator\nimport { connect } from 'react-redux';\nimport * as Actions from '../actions';\n\n\n\n// Creating sign up page with validiation code\n\nconst validate = values => {\n  const errors = {};\n// checking the email, password, and passwordConfirmation\n// have a value. Using Regex in the email value to make \n// sure it is a valid email address. \n// Then comparing both password and passwordConfirmation values\n// to make sure they match.\n\n\n  if (!values.email) {\n    errors.email = \"Need an email\";\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = \"Invalid email\"\n  }\n  \n  if (!values.password) {\n    errors.password = \"Please enter a password\";\n  }\n\n  if (!values.passwordConfirmation) {\n    errors.passwordConfirmation = \"Please enter a password confirmation\";\n  }\n\n  if (values.password !== values.passwordConfirmation) {\n    errors.password = \"Passwords don't match.\";\n  }\n\n  return errors;\n};\n\nclass Signup extends React.Component {\n  handleFormSubmit = (values) => {\n    // console.log(values);\n    // this.props.signInUser(values);\n    this.props.signUpUser(values);\n  };\n\n// Difference between Login and Signup, is that there is a passwordConfirmation field.\n// Instead of using input to the component property, using this.renderField.\n// Redux-form accepts three default DOM inputs: input, which we used in the Login form,\n// along with textarea, and select. If more customizations are needed, Field will also\n// accept a custom component or stateless function.\n\n// {...} syntax is used when you wrap a component or a stateless function,\n// and Field automatically passes it a number of props. By adding the syntax\n// to the HTML input element with {...input}, this we desctruct the value of the input prop\n// and merging in the values provided by the field component.\n  \n  // Used before:\n  // renderField = ({input, label, type, meta: {touched, error}}) => (\n  //   <fieldset className=\"form-group\">\n  //     <label>{label}</label>\n  //     <div>\n  //       <input {...input} \n  //         placeholder={label} \n  //         className=\"form-control\" \n  //         type={type}\n  //       />\n\n/* the conditional checks if the user has \"touched\" - or clicked into -\nthe field, and not to show any display errors before the user gets to \nhave a chance to interact with the field. If there is an error attached,\nit will display the error message. */\n  //       {touched && error && <span>{error}</span>}\n  //     </div>\n  //   </fieldset>\n  // );\n\n    \n  \n  // Updated:\n\n  // adding a ternary conditional to check whether the fields have errors,\n  // and if the field has been touched and has an error,\n  // Bootstrap class of has-error on fieldset will be activated.\n  // Also adding Bootstrap class control-label to the labels and help-block\n  // to the actual error text. Now if there is an error on a form, red color will show.\n  renderField = ({ input, label, type, meta: { touched, error }}) => (\n    <fieldset className={`form-group ${touched && error ? 'has-error' : ''}`}>\n      <label className=\"control-label\">{label}</label>\n      <div>\n        <input {...input} placeholder={label} className=\"form-control\" type={type}/>\n        {touched && error && <div className=\"help-block\">{error}</div>}\n      </div>\n    </fieldset>\n  );\n\n\n  renderAuthenticationError() {\n    if (this.props.authenticationError) {\n      return <div className=\"alert alert-danger\">{this.props.authenticationError}</div>;\n    }\n    return <div></div>;\n  }\n    \n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"col-md-6 col-md-offset-3\">\n          <h2 className=\"text-center\">Sign up here</h2>\n\n          { this.renderAuthenticationError() }\n\n          <form onSubmit={this.props.handleSubmit(this.handleFormSubmit)}>\n            <Field \n              name=\"email\" \n              type=\"text\" \n              component={this.renderField} \n              label=\"Email\"\n            />\n            <Field \n              name=\"password\" \n              type=\"password\" \n              component={this.renderField} \n              label=\"Password\"\n            />\n            <Field \n              name=\"passwordConfirmation\" \n              type=\"password\" \n              component={this.renderField} \n              label=\"Password confirmation\" \n            />\n            <button action=\"submit\" className=\"btn btn-primary\">Sign up</button>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    authenticationError: state.auth.error\n  }\n}\n\nexport default connect(mapStateToProps, Actions)(reduxForm({\n  form: 'signup',\n  validate\n})(Signup));\n\n// export default connect(null, Actions)(reduxForm({\n//   form: 'signup',\n//   validate\n// })(Signup));\n\n\n// validate function added as an argument to reduxForm\n// configuration object at the bottom of the file so \n// that the information, along with the form name, will be passed\n// to the FormReducer.\n\n// Before:\n// export default reduxForm({\n//   form: 'signup',\n//   validate\n// }) (Signup);\n\n\n// Boilerplate code\n// class Signup extends React.Component {\n//   render() {\n//     return <div>Signup Here</div>;\n//   }\n// }\n\n// export default Signup;","import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\n// connecting actions\nimport { connect } from 'react-redux';\nimport * as Actions from '../actions';\n\n\n// adding validation code\nconst validate = values => {\n  const errors = {};\n\n  if (!values.email) {\n    errors.email = 'Please enter an email';\n    \n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid Email Address'\n  }\n\n  if(!values.password) {\n    errors.password = \"Please enter a password\";\n  }\n\n  return errors;\n};\n\n// Boilerplate for login page\nclass Login extends React.Component {\n\n  // calling my own handleFormSubmit method\n  // Once this.props.handleSubmit() is called,\n  // it passes the value of the form as an argument to\n  // whatever callback is supplied, which is handleFormSubmit() method.\n\n  handleFormSubmit = (values) => {\n    // console.log(values);\n    this.props.signInUser(values);\n    }\n\n  // Adding validation code\n  renderField = ({ input, label, type, meta: { touched, error }}) => (\n    <fieldset className={`form-group ${touched && error ? 'has-error' : ''}`}>\n      <label className=\"control-label\">{label}</label>\n      <div>\n        <input {...input} placeholder={label} className=\"form-control\" type={type} />\n        {touched && error && <div className=\"help-block\">{error}</div>}\n      </div>\n    </fieldset>\n  );\n\n  renderAuthenticationError() {\n    if (this.props.authenticationError) {\n      return <div className=\"alert alert-danger\">{this.props.authenticationError}</div>;\n    }\n    return <div></div>;\n  }\n\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"col-md-6 col-md-offset-3\">\n          <h2 className=\"text-center\">\n            Log In Here\n          </h2>\n\n          { this.renderAuthenticationError() }\n\n{/* handleSubmit(), is a redux-form method, made available via\nthis.props by reduxForm()(), that we can attach to the form's onSubmit event handler.\nThis lets redux-form know that the user is trying to submit the form so it can intercept\nit and run validation first. */}\n          <form onSubmit={this.props.handleSubmit(this.handleFormSubmit)}>\n           \n{/* redux-form provides Field component, which makes it easier to connect \nindividual inputs to the Redux Store. The values of the inputs are made \navailable via redux-reform's this.props.handleSubmit. */}\n            <fieldset className=\"form-group\">\n              {/* <label>Email Here</label> */}\n              <Field \n                name=\"email\" \n                // component=\"input\" \n                component={this.renderField}\n                className=\"form-control\" \n                type=\"text\" \n                // placeholder=\"Email\"\n                label=\"Email\"\n              />\n            </fieldset>\n\n            <fieldset className=\"form-group\">\n              {/* <label>Password Here</label> */}\n              <Field \n                name=\"password\" \n                // component=\"input\"\n                component={this.renderField}\n                className=\"form-control\"\n                type=\"password\"\n                // placeholder=\"Password\"\n                label=\"Password\"\n              />\n            </fieldset>\n\n            <button action=\"submit\" className=\"btn btn-primary\">\n              Sign In Here\n            </button>\n\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    authenticationError: state.auth.error\n  }\n}\n\nexport default connect(mapStateToProps, Actions)(reduxForm({\n  form: 'login',\n  validate\n})(Login));\n\n\n\n// using react-redux connect()() since the components now \n// need to be connected to redux in order to have access\n// to our signInUser() action creator.\n// export default connect(null, Actions)(reduxForm({\n//   form: 'login',\n//   validate\n// })(Login));\n\n\n\n// BEFORE: \n// using reduxForm()(), connects the form to Redux.\n// In the first set of parentheses, it takes a config object\n// that has only one required argument: a unique name for the form.\n// This will be set as a key on the store object returned from the FormReducer\n// export default reduxForm({\n//   form: 'login',\n  // adding validate to the reduxForm\n//   validate\n// })(Login);\n\n","import React from 'react';\n\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as Actions from '../actions';\nimport GifList from '../components/GifList';\nimport GifModal from '../components/GifModal';\nimport '../styles/App.css';\n\nclass Favorites extends React.Component {\n\n  // using componentWillMount method to fetch favorite gifs\n  componentWillMount() {\n    this.props.actions.fetchFavoritedGifs();\n  }\n\n  render() {\n    return (\n      <div>\n        <GifList \n          gifs={ this.props.gifs }\n          onGifSelect={ selectedGif => this.props.actions.openModal({selectedGif}) }\n          onFavoriteSelect={ selectedGif => this.props.actions.favoriteGif({selectedGif}) }\n          onFavoriteDeselect={ selectedGif => this.props.actions.unfavoriteGif({selectedGif}) }\n          isAuthenticated={ this.props.authenticated }\n          // setting isFavorite as true, so that GifItems know\n          // that the inital state on all of the components should be favorited.\n          isFavorite={true} \n        />\n        <GifModal \n          modalIsOpen={ this.props.modalIsOpen }\n          selectedGif={ this.props.selectedGif }\n          onRequestClose={ () => this.props.actions.closeModal()}/>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    authenticated: state.auth.authenticated,\n    gifs: state.gifs.favorites,\n    modalIsOpen: state.modal.modalIsOpen,\n    selectedGif: state.modal.selectedGif\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(Actions, dispatch)\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Favorites);\n\n// Before; base template\n// class Favorites extends React.Component {\n//   render() {\n//     return <div>Favorites</div>;\n//   }\n// }\n\n// export default Favorites;","import React from 'react';\nimport { Router } from 'react-router';\nimport { Route, Redirect} from 'react-router-dom';\nimport { history } from '../store/configureStore';\n\nimport { connect } from 'react-redux';\n\n// NOTE: \n// React-giphy completed;\n// having issue with not seeing favorites.\n// Look into Firebase database.\n// Refactor code\n\n\n// Routing all the containers\nimport Header from '../containers/Header';\nimport Home from '../containers/Home';\nimport Signup from '../containers/Signup';\nimport Login from '../containers/Login';\nimport Favorites from '../containers/Favorites';\n\n\n\n// Have two functions that returnthe Route components. Passing through a component\n// and checking whether the user is authenticated, then either returning the component that is being \n// passed as an arguement or redirecting them to the '/login' or '/favorites' location.\n// PrivateRoutes are restricted to the authenticated users, and PublicRoutes are restricted to users who are not logged in.\nconst PrivateRoute = ({component: Component, authenticated, ...props}) => {\n\n  return (\n    <Route\n      {...props}\n      render={(props) => authenticated === true\n        ? <Component {...props} />\n        : <Redirect to={{pathname: '/Login', state: {from: props.location}}} />} \n      />\n  );\n}\n\n\n// Calling both the PublicRoute and PrivateRoute rather than just the vanilla Route. \n// Passing through whether if the user has been authenticated from the store. \n\n// PublicRoute isnt working\n\n// const PublicRoute = ({component: Component, authenticated, ...props}) => {\n//   return (\n//     <Route\n//       {...props}\n//       render={(props) => authenticated === false\n//         ? <Component {...props} />\n//         : <Redirect to='/Favorites'/>}\n//       />\n//     );\n//   };\n\n//<PublicRoute authenticated={this.props.authenticated} path=\"/signup\" component={ Signup } />\n//<PublicRoute authenticated={this.props.authenticated} path=\"/login\" component={ Login } /> \n\nclass App extends React.Component {\n  \n  render() {\n\n    return (\n      // wrapping all of the code in ConnectedRouter component \n      // from react-router-redux and passing the history object.\n      // ConnectedRouter based on the end of the app's URL.\n      // For ex, url/favorites and uses it as a path to render the components.\n      <Router history={history}>\n        <div>\n          {/* Header will be rendered in every page */}\n          <Header />\n          {/* Can add a Footer here to render on every page */}\n          <div className=\"container\">\n          {/* passing in the component that should render \n          whenever a path contains exactly \"/:\" */}\n            <Route exact path=\"/\" component={ Home }/>\n            {/* <Route path=\"/signup\" component={ Signup }/>\n            <Route path=\"/login\" component={ Login }/>\n            <Route path=\"/favorites\" component={ Favorites }/> */}\n            <Route authenticated={this.props.authenticated} path=\"/signup\" component={ Signup } />\n            <Route authenticated={this.props.authenticated} path=\"/login\" component={ Login } />\n            <PrivateRoute authenticated={this.props.authenticated} path=\"/favorites\" component={ Favorites } />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return { authenticated: state.auth.authenitcated };\n};\n\n\nexport default connect (mapStateToProps)(App);\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport { Provider } from 'react-redux';\nimport { configureStore } from './store/configureStore';\n\n\n\n// creating store by calling the\n// configureStore() method that was set up in configureStore.js\nconst store = configureStore();\n\n// wrapping App container in a redux Provider.\n// this connects react to the redux store\n\n// using ReactDOM to render the application within\n// the div with an id of app in the index.html\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('app') // div id in index.html\n);\n\n\n\n\n\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// serviceWorker.unregister();\n"],"sourceRoot":""}